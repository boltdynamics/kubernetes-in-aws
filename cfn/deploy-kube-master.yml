---
AWSTemplateFormatVersion: "2010-09-09"
Description: Deploy autoScaling group and resources
Transform: AWS::Serverless-2016-10-31

Parameters:
  NewRelicLicenceKey:
    Description: New Relice Licence Key
    Type: String
  WorkerNodePrivateIps:
    Description: Private IP Addresses to use for Kuberenetes Worker Nodes
    Type: CommaDelimitedList
  SnsStackName:
    Description: Cloudformation stack name that contains SNS topic information
    Type: String

Resources:

######################################################### Kubernetes Master Resources ###################################################################

  PrasKubeFleetSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group which used by Pras Kubernetes Master Nodes
      VpcId:
        Fn::ImportValue: pras-vpc-id
      Tags:
        - Key: "created_by"
          Value: "pras"
        - Key: "purpose"
          Value: "learning"

  PrasKubeMasterFleetInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Policies:
        - PolicyName: SsmSelfManagedPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - cloudwatch:PutMetricData
                Resource: "*"
              - Effect: Allow
                Action:
                  - ec2:DescribeInstanceStatus
                Resource: "*"
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:DescribeLogGroups
                  - logs:DescribeLogStreams
                  - logs:PutLogEvents
                Resource: "*"
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:PutObjectAcl
                  - s3:PutObjectTagging
                  - s3:GetEncryptionConfiguration
                  - s3:GetBucketLocation
                Resource: "*"
              - Effect: Allow
                Action:
                  - ec2:ModifyNetworkInterfaceAttribute
                  - ec2:DescribeNetworkInterfaces
                Resource: "*"

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: pras-kube-fleet-instance-profile
      Path: "/"
      Roles:
        - !Ref PrasKubeMasterFleetInstanceRole

  PrasKubeMasterFleet:
    Type: AWS::AutoScaling::AutoScalingGroup
    CreationPolicy:
      ResourceSignal:
        Count: 2
        Timeout: PT30M
    Properties:
      AutoScalingGroupName: pras-kube-master-nodes
      ServiceLinkedRoleARN:
        !Sub arn:aws:iam::${AWS::AccountId}:role/aws-service-role/autoscaling.amazonaws.com/AWSServiceRoleForAutoScaling
      VPCZoneIdentifier:
        - Fn::ImportValue: pras-vpc-public-subnet-a-id
        - Fn::ImportValue: pras-vpc-public-subnet-b-id
      MinSize: 1
      MaxSize: 3
      DesiredCapacity: 2
      MetricsCollection:
        - Granularity: 1Minute
      HealthCheckGracePeriod: 30
      MixedInstancesPolicy:
        InstancesDistribution:
          OnDemandPercentageAboveBaseCapacity: 50
          SpotAllocationStrategy: lowest-price
          SpotMaxPrice: ""
        LaunchTemplate:
            LaunchTemplateSpecification:
              LaunchTemplateId: !Ref PrasKubeMasterFleetLaunchTemplate
              Version: !GetAtt PrasKubeMasterFleetLaunchTemplate.LatestVersionNumber
      NotificationConfigurations:
        - NotificationTypes:
            - autoscaling:EC2_INSTANCE_LAUNCH
            - autoscaling:EC2_INSTANCE_TERMINATE
          TopicARN:
            - Fn::ImportValue: !Sub ${SnsStackName}-SnsTopicArn

  PrasKubeMasterFleetLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: pras-kube-master-asg-launch-template
      LaunchTemplateData:
        IamInstanceProfile:
          Arn: !GetAtt InstanceProfile.Arn
        ImageId: ami-080b87fdc6d5ca853
        InstanceType: t3.medium
        SecurityGroupIds:
          - !Ref PrasKubeFleetSecurityGroup
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: created_by
                Value: pras
              - Key: Master Node
                Value: true
              - Key: Name
                Value: pras-kube-master-node
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash -eux

            set -o xtrace
            err() {
                FAILED_COMMAND="Line $(caller): $?"
            }
            trap 'err' ERR

            wget https://s3.amazonaws.com/amazoncloudwatch-agent/ubuntu/amd64/latest/amazon-cloudwatch-agent.deb -O /tmp/amazon-cloudwatch-agent.deb
            dpkg -i /tmp/amazon-cloudwatch-agent.deb

            apt-get update -y
            sudo apt-get install python-pip -y
            sudo apt install docker.io -y
            sudo apt-get install jq -y
            apt-get install unzip -y
            sudo pip install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz
            instance_id=$(curl http://169.254.169.254/latest/meta-data/instance-id)

            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install

            # Cloudformation Launch Template does not let you disable source destination check
            # https://stackoverflow.com/questions/64031706/aws-cloudformation-for-a-nat-instance-disable-sourcedestinationcheck-in-a-laun
            eni=$(aws ec2 --region ${AWS::Region} describe-network-interfaces \
              | jq -Mr ".NetworkInterfaces[] | select(.Attachment.InstanceId==\"$instance_id\") | .NetworkInterfaceId")
            aws ec2 modify-network-interface-attribute --region ${AWS::Region} --network-interface-id $eni --no-source-dest-check

            ip_address=$(curl http://169.254.169.254/latest/meta-data/local-ipv4)

            # Track running processes every minute
            line="* * * * * root ps -eHo stime,start,user,pid,ppid,pgid,sid,c,sz,rss,time,cmd >> /var/log/proctree.log"
            echo "$line" >> /etc/crontab
            cat << EOF > /etc/logrotate.d/proc-mon
            /var/log/proctree.log {
                missingok
                notifempty
                size 100k
                create 0600 root root
            }
            EOF

            cat > /var/log/cfn-init.sh << EOL
            #!/bin/bash -e
            echo "${AWS::StackName} is starting..."
            echo "Setting up Kubernetes infra..."
            /usr/local/bin/cfn-init -v --stack ${AWS::StackName} \
            --resource PrasKubeMasterFleetLaunchTemplate \
            --configsets setup_kubernetes_infrastructure --region ${AWS::Region}

            echo "Setting up CFN Hup"
            /usr/local/bin/cfn-init -v --stack ${AWS::StackName} \
            --resource PrasKubeMasterFleetLaunchTemplate \
            --configsets cfnhup --region ${AWS::Region}

            echo "Setting up New Relic"
            /usr/local/bin/cfn-init -v --stack ${AWS::StackName} \
            --resource PrasKubeMasterFleetLaunchTemplate \
            --configsets configure_newrelic --region ${AWS::Region}
            EOL

            sh /var/log/cfn-init.sh &>> /var/log/cfn-init.log

            cat > /var/log/cfn-signal.sh << EOL
            #!/bin/bash -e
            /usr/local/bin/cfn-signal --exit-code 0 \
            --stack ${AWS::StackName} --resource PrasKubeMasterFleet \
            --region ${AWS::Region} || true
            EOL

            sh /var/log/cfn-signal.sh &>> /var/log/cfn-signal.log

    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          cfnhup:
            - hupsetup
          configure_newrelic:
            - new_relic
          setup_kubernetes_infrastructure:
            - kubernetes_infra
            - generte_client_certs
            - generate_admin_client_certs

        kubernetes_infra:
          commands:
            setup_pki_infrastructure:
              command: |
                wget -q --show-progress --https-only --timestamping \
                  https://storage.googleapis.com/kubernetes-the-hard-way/cfssl/1.4.1/linux/cfssl \
                  https://storage.googleapis.com/kubernetes-the-hard-way/cfssl/1.4.1/linux/cfssljson

                chmod +x cfssl cfssljson
                sudo mv cfssl /usr/local/bin/
                sudo mv cfssljson /usr/local/bin/

            install_kubectl:
              command: |
                wget -q https://storage.googleapis.com/kubernetes-release/release/v1.18.6/bin/linux/amd64/kubectl
                sudo chmod +x kubectl
                sudo mv kubectl /usr/local/bin/

        generte_client_certs:
          commands:
            generte_client_certs:
              command: cd /kubernetes && sudo cfssl gencert -initca ca-csr.json | cfssljson -bare ca
          files:
            /kubernetes/ca-config.json:
              content: |
               {
                  "signing": {
                    "default": {
                      "expiry": "8760h"
                    },
                    "profiles": {
                      "kubernetes": {
                        "usages": ["signing", "key encipherment", "server auth", "client auth"],
                        "expiry": "8760h"
                      }
                    }
                  }
                }

            /kubernetes/ca-csr.json:
              content: |
                {
                  "CN": "Kubernetes",
                  "key": {
                    "algo": "rsa",
                    "size": 2048
                  },
                  "names": [
                    {
                      "C": "US",
                      "L": "Portland",
                      "O": "Kubernetes",
                      "OU": "CA",
                      "ST": "Oregon"
                    }
                  ]
                }

        generate_admin_client_certs:
          commands:
            generate_admin_client_certs:
              command: cd /kubernetes && sudo cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes admin-csr.json | cfssljson -bare admin
          # https://github.com/prabhatsharma/kubernetes-the-hard-way-aws/blob/master/docs/04-certificate-authority.md
          files:
            /kubernetes/admin-csr.json:
              content: |
                {
                  "CN": "admin",
                  "key": {
                    "algo": "rsa",
                    "size": 2048
                  },
                  "names": [
                    {
                      "C": "US",
                      "L": "Portland",
                      "O": "system:masters",
                      "OU": "Kubernetes The Hard Way",
                      "ST": "Oregon"
                    }
                  ]
                }

        new_relic:
          files:
            /etc/newrelic-infra.yml:
              content: !Sub |
                verbose: 1
                license_key: ${NewRelicLicenceKey}
                display_name: PrasKubeMasterNode
                log_file: /var/log/newrelic-infra/newrelic-infra.log
                custom_attributes:
                  environment: pras-production
                  service: kubernetes
                  team: pras-go-team
                  role: master-node
                log_format: json
            /etc/newrelic-infra/logging.d/cfn-init-logs.yml:
              content: !Sub |
                logs:
                  - name: "audit_logs"
                    file: /var/log/audit/audit.log
                  - name: "messages"
                    file: /var/log/messages
                  - name: "ssm_agent_logs"
                    file: /var/log/amazon/ssm/amazon-ssm-agent.log
          commands:
            enable_new_relic_gpg_key:
              command: curl -s https://download.newrelic.com/infrastructure_agent/gpg/newrelic-infra.gpg | sudo apt-key add -
            add_infrastructure_monitoring_agent_repository:
              command: printf "deb [arch=amd64] https://download.newrelic.com/infrastructure_agent/linux/apt bionic main" | sudo tee -a /etc/apt/sources.list.d/newrelic-infra.list
            install_new_relic_package:
              command: sudo apt-get update -y && sudo apt-get install newrelic-infra -y

        hupsetup:
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                verbose=true
                interval=5
              mode: "000400"
              owner: "root"
              group: "root"
            /lib/systemd/system/cfn-hup.service:
              content: |
                [Unit]
                Description=cfn-hup daemon

                [Service]
                Type=simple
                ExecStart=/usr/local/bin/cfn-hup
                Restart=always

                [Install]
                WantedBy=multi-user.target
              mode: "000400"
              owner: root
              group: root

            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.PrasKubeMasterFleetLaunchTemplate.Metadata.AWS::CloudFormation::Init
                action=/usr/local/bin/cfn-init -v --stack ${AWS::StackName} --resource PrasKubeMasterFleetLaunchTemplate --configsets cfnhup,setup_kubernetes_infrastructure,configure_newrelic --region ${AWS::Region}
                runas=root
              mode: "000400"
              owner: "root"
              group: "root"

          commands:
            01enable_cfn_hup:
              command: systemctl enable cfn-hup.service

            02start_cfn_hup:
              command: systemctl start cfn-hup.service

  StopPrasKubeMasterFleetEvery3Hours:
    Type: AWS::AutoScaling::ScheduledAction
    Properties:
      AutoScalingGroupName:
        Ref: PrasKubeMasterFleet
      MinSize: 0
      MaxSize: 0
      DesiredCapacity: 0
      Recurrence: "0 */3 * * *"


######################################################### Kubernetes Worker Node Resources ###################################################################

  PrasKubeWorkerNode1:
    Type: AWS::EC2::Instance
    DependsOn: InstanceProfile
    Properties:
      ImageId: ami-080b87fdc6d5ca853
      InstanceType: t3.medium
      SourceDestCheck: false
      IamInstanceProfile: pras-kube-fleet-instance-profile
      NetworkInterfaces:
        - DeviceIndex: 0
          GroupSet:
            - Ref: PrasKubeFleetSecurityGroup
          SubnetId: !ImportValue pras-vpc-private-subnet-b-id
          PrivateIpAddresses:
            - Primary: true
              PrivateIpAddress: !Select [ 0, !Ref WorkerNodePrivateIps ]
            - Primary: false
              PrivateIpAddress: 10.0.0.198
            - Primary: false
              PrivateIpAddress: 10.0.0.199
            - Primary: false
              PrivateIpAddress: 10.0.0.200
            - Primary: false
              PrivateIpAddress: 10.0.0.201
      Tags:
        - Key: Name
          Value: pras-kube-worker-node-1

  PrasKubeWorkerNode2:
    Type: AWS::EC2::Instance
    DependsOn: InstanceProfile
    Properties:
      ImageId: ami-080b87fdc6d5ca853
      InstanceType: t3.medium
      SourceDestCheck: false
      IamInstanceProfile: pras-kube-fleet-instance-profile
      NetworkInterfaces:
        - DeviceIndex: 0
          GroupSet:
            - Ref: PrasKubeFleetSecurityGroup
          SubnetId: !ImportValue pras-vpc-private-subnet-a-id
          PrivateIpAddresses:
            - Primary: true
              PrivateIpAddress: !Select [ 1, !Ref WorkerNodePrivateIps ]
            - Primary: false
              PrivateIpAddress: 10.0.0.134
            - Primary: false
              PrivateIpAddress: 10.0.0.135
            - Primary: false
              PrivateIpAddress: 10.0.0.136
            - Primary: false
              PrivateIpAddress: 10.0.0.137
      Tags:
        - Key: Name
          Value: pras-kube-worker-node-2
######################################################### CLOUDWATCH ###################################################################

  CloudWatchConfigParam:
      Type: AWS::SSM::Parameter
      Properties:
        Name: pras-cloudwatch-config
        Type: String
        Value: |
          {
            "metrics": {
              "append_dimensions": {
                "InstanceId": "${!aws:InstanceId}"
              },
              "metrics_collected": {
                "disk": {
                  "measurement": [
                      "used_percent"
                  ],
                  "ignore_file_system_types": [
                      "sysfs",
                      "devtmpfs",
                      "tmpfs",
                      "overlay"
                  ],
                  "metrics_collection_interval": 60,
                  "resources": [
                      "*"
                  ]
                },
                "mem": {
                  "measurement": [
                      "mem_used_percent"
                  ],
                  "metrics_collection_interval": 60
                }
              }
            },
            "logs": {
              "logs_collected": {
                "files": {
                  "collect_list": [
                    {
                      "file_path": "/var/log/audit/audit.log",
                      "log_group_name": "/var/log/audit",
                      "log_stream_name": "/var/log/audit/audit.log-{instance_id}",
                      "timezone": "Local"
                    },
                    {
                      "file_path": "/var/log/messages",
                      "log_group_name": "/var/log/messages",
                      "log_stream_name": "/var/log/messages-{instance_id}",
                      "timezone": "Local"
                    },
                    {
                      "file_path": "/var/log/secure",
                      "log_group_name": "/var/log/secure",
                      "log_stream_name": "/var/log/secure-{instance_id}",
                      "timezone": "Local"
                    },
                    {
                      "file_path": "/var/log/proctree.log",
                      "log_group_name": "/var/log/proctree",
                      "log_stream_name": "/var/log/proctree-{instance_id}",
                      "timezone": "Local"
                    },
                    {
                      "file_path": "/var/log/amazon/ssm/amazon-ssm-agent.log",
                      "log_group_name": "/var/log/amazon/ssm/amazon-ssm-agent",
                      "log_stream_name": "/var/log/amazon/ssm/amazon-ssm-agent.log-{instance_id}",
                      "timezone": "Local"
                    },
                    {
                      "file_path": "/var/log/amazon/ssm/errors.log",
                      "log_group_name": "/var/log/amazon/ssm/errors",
                      "log_stream_name": "/var/log/amazon/ssm/errors.log-{instance_id}",
                      "timezone": "Local"
                    },
                    {
                      "file_path": "/var/log/cfn-*.log",
                      "log_group_name": "/var/log/userdata",
                      "log_stream_name": "/var/log/amazon/cfn/cfn-init.log-{instance_id}",
                      "timezone": "Local"
                    },
                    {
                      "file_path": "/var/log/cloud-init.log",
                      "log_group_name": "/var/log/cloud-init",
                      "log_stream_name": "/var/log/amazon/cloud-init/cloud-init.log-{instance_id}",
                      "timezone": "Local"
                    },
                    {
                      "file_path": "/var/log/cloud-init-output.log",
                      "log_group_name": "/var/log/cloud-init",
                      "log_stream_name": "/var/log/amazon/cloud-init/cloud-init-output.log-{instance_id}",
                      "timezone": "Local"
                    }
                  ]
                }
              }
            }
          }

  CloudWatchConfig:
    Type: AWS::SSM::Association
    DependsOn: PrasKubeMasterFleet
    Properties:
      AssociationName: Configure-CloudWatch
      Name: AWS-RunShellScript
      Parameters:
        commands:
          - >
            sudo /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config
            -m ec2 -c ssm:/pras-cloudwatch-config
          - sudo /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -m ec2 -a start
      ScheduleExpression: rate(1 hour)
      Targets:
        - Key: tag:created_by
          Values:
            - pras

######################################################### END CLOUDWATCH ###################################################################

Outputs:
  PrasKubeFleetSecurityGroupOutput:
    Description: Pras Asg Security Group Id
    Value: !Ref PrasKubeFleetSecurityGroup
