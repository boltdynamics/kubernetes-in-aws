---
AWSTemplateFormatVersion: "2010-09-09"
Description: Deploy autoScaling group and resources
Transform: AWS::Serverless-2016-10-31

Resources:
  PrasAsgSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group which used by Pras ASG EC2s.
      VpcId:
        Fn::ImportValue: pras-vpc-id
      Tags:
        - Key: "created_by"
          Value: "pras"
        - Key: "purpose"
          Value: "learning"

  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Policies:
        - PolicyName: SsmSelfManagedPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - cloudwatch:PutMetricData
                Resource: "*"
              - Effect: Allow
                Action:
                  - ec2:DescribeInstanceStatus
                Resource: "*"
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:DescribeLogGroups
                  - logs:DescribeLogStreams
                  - logs:PutLogEvents
                Resource: "*"
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:PutObjectAcl
                  - s3:PutObjectTagging
                  - s3:GetEncryptionConfiguration
                  - s3:GetBucketLocation
                Resource: "*"

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - !Ref InstanceRole

  PrasLearningFleet:
    Type: AWS::AutoScaling::AutoScalingGroup
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT10M
    Properties:
      AutoScalingGroupName: pras-asg
      VPCZoneIdentifier:
        - Fn::ImportValue: pras-vpc-private-subnet-a-id
        - Fn::ImportValue: pras-vpc-private-subnet-b-id
      MinSize: 0
      MaxSize: 2
      DesiredCapacity: 1
      MetricsCollection:
        - Granularity: 1Minute
      HealthCheckGracePeriod: 30
      LaunchTemplate:
        LaunchTemplateId: !Ref PrasLearningFleetLaunchTemplate
        Version: !GetAtt PrasLearningFleetLaunchTemplate.LatestVersionNumber

  PrasLearningFleetLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: pras-asgs-launch-template
      LaunchTemplateData:
        IamInstanceProfile:
          Arn: !GetAtt InstanceProfile.Arn
        ImageId: ami-080b87fdc6d5ca853
        InstanceType: t2.micro
        SecurityGroupIds:
          - !Ref PrasAsgSecurityGroup
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: created_by
                Value: pras
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash -eux

            set -o xtrace
            err() {
                FAILED_COMMAND="Line $(caller): $?"
            }
            trap 'err' ERR

            wget https://s3.amazonaws.com/amazoncloudwatch-agent/ubuntu/amd64/latest/amazon-cloudwatch-agent.deb -O /tmp/amazon-cloudwatch-agent.deb
            dpkg -i /tmp/amazon-cloudwatch-agent.deb

            apt-get update -y
            sudo apt-get install python-pip -y
            sudo pip install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz
            instance_id=$(curl http://169.254.169.254/latest/meta-data/instance-id)
            ip_address=$(curl http://169.254.169.254/latest/meta-data/local-ipv4)

            # Track running processes every minute
            line="* * * * * root ps -eHo stime,start,user,pid,ppid,pgid,sid,c,sz,rss,time,cmd >> /var/log/proctree.log"
            echo "$line" >> /etc/crontab
            cat << EOF > /etc/logrotate.d/proc-mon
            /var/log/proctree.log {
                missingok
                notifempty
                size 100k
                create 0600 root root
            }
            EOF

            cat > /var/log/cfn-init.sh << EOL
            #!/bin/bash -e
            echo "${AWS::StackName} is starting..."
            /usr/local/bin/cfn-init -v --stack ${AWS::StackName} \
            --resource PrasLearningFleetLaunchTemplate \
            --configsets install_docker --region ${AWS::Region}

            echo "Setting up CFN Hup"
            /usr/local/bin/cfn-init -v --stack ${AWS::StackName} \
            --resource PrasLearningFleetLaunchTemplate \
            --configsets cfnhup --region ${AWS::Region}
            EOL

            sh /var/log/cfn-init.sh &>> /var/log/cfn-init.log

            cat > /var/log/cfn-signal.sh << EOL
            #!/bin/bash -e
            /usr/local/bin/cfn-signal --exit-code 0 \
            --stack ${AWS::StackName} --resource PrasLearningFleet \
            --region ${AWS::Region} || true
            EOL

            sh /var/log/cfn-signal.sh &>> /var/log/cfn-signal.log

    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          # ssm_setup:
          #   - setup-aws-ssm-agent
          cfnhup:
            - hupsetup
          install_docker:
            - install_docker

        hupsetup:
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                verbose=true
                interval=5
              mode: "000400"
              owner: "root"
              group: "root"
            /lib/systemd/system/cfn-hup.service:
              content: |
                [Unit]
                Description=cfn-hup daemon

                [Service]
                Type=simple
                ExecStart=/usr/local/bin/cfn-hup
                Restart=always

                [Install]
                WantedBy=multi-user.target
              mode: "000400"
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.PrasLearningFleetLaunchTemplate.Metadata.AWS::CloudFormation::Init
                action=/usr/local/bin/cfn-init -v --stack ${AWS::StackName} --resource PrasLearningFleetLaunchTemplate --configsets install_docker --region ${AWS::Region}
                runas=root
              mode: "000400"
              owner: "root"
              group: "root"

          commands:
            01enable_cfn_hup:
              command: systemctl enable cfn-hup.service

            02start_cfn_hup:
              command: systemctl start cfn-hup.service

        install_docker:
          commands:
            get_certificates:
              command: sudo apt-get install -y apt-transport-https ca-certificates
            set_gpg_key:
              command: curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
            add_docker_repo:
              command: sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu bionic stable"
            update:
              command: sudo apt-get update -y
            install_docker_ce:
              command: apt install docker-ce -y
            add_ubuntu_user_to_docker_group:
              command: sudo usermod -aG docker ubuntu

          # commands:
          #     docker_for_ec2_user:
          #         command: usermod -G docker ec2-user
        # setup-aws-ssm-agent:
        #   files:
        #     /tmp/amazon-ssm-agent.deb:
        #       source: !Sub 'https://amazon-ssm-${AWS::Region}.s3.amazonaws.com/latest/debian_amd64/amazon-ssm-agent.deb'
        #       mode: '000644'
        #       owner: root
        #       group: root
        #   commands:
        #     00_setup_aws_ssm_agent:
        #       command: >
        #         dpkg -i /tmp/amazon-ssm-agent.deb
        #         systemctl enable amazon-ssm-agent.service
        #         service amazon-ssm-agent restart

  StopPrasLearningFleetEvery3Hours:
    Type: AWS::AutoScaling::ScheduledAction
    Properties:
      AutoScalingGroupName:
        Ref: PrasLearningFleet
      MaxSize: 0
      Recurrence: "0 */3 * * *"


######################################################### CLOUDWATCH ###################################################################

  CloudWatchConfigParam:
      Type: AWS::SSM::Parameter
      Properties:
        Name: pras-cloudwatch-config
        Type: String
        Value: |
          {
            "metrics": {
              "append_dimensions": {
                "InstanceId": "${!aws:InstanceId}"
              },
              "metrics_collected": {
                "disk": {
                  "measurement": [
                      "used_percent"
                  ],
                  "ignore_file_system_types": [
                      "sysfs",
                      "devtmpfs",
                      "tmpfs",
                      "overlay"
                  ],
                  "metrics_collection_interval": 60,
                  "resources": [
                      "*"
                  ]
                },
                "mem": {
                  "measurement": [
                      "mem_used_percent"
                  ],
                  "metrics_collection_interval": 60
                }
              }
            },
            "logs": {
              "logs_collected": {
                "files": {
                  "collect_list": [
                    {
                      "file_path": "/var/log/audit/audit.log",
                      "log_group_name": "/var/log/audit",
                      "log_stream_name": "/var/log/audit/audit.log-{instance_id}",
                      "timezone": "Local"
                    },
                    {
                      "file_path": "/var/log/messages",
                      "log_group_name": "/var/log/messages",
                      "log_stream_name": "/var/log/messages-{instance_id}",
                      "timezone": "Local"
                    },
                    {
                      "file_path": "/var/log/secure",
                      "log_group_name": "/var/log/secure",
                      "log_stream_name": "/var/log/secure-{instance_id}",
                      "timezone": "Local"
                    },
                    {
                      "file_path": "/var/log/proctree.log",
                      "log_group_name": "/var/log/proctree",
                      "log_stream_name": "/var/log/proctree-{instance_id}",
                      "timezone": "Local"
                    },
                    {
                      "file_path": "/var/log/amazon/ssm/amazon-ssm-agent.log",
                      "log_group_name": "/var/log/amazon/ssm/amazon-ssm-agent",
                      "log_stream_name": "/var/log/amazon/ssm/amazon-ssm-agent.log-{instance_id}",
                      "timezone": "Local"
                    },
                    {
                      "file_path": "/var/log/amazon/ssm/errors.log",
                      "log_group_name": "/var/log/amazon/ssm/errors",
                      "log_stream_name": "/var/log/amazon/ssm/errors.log-{instance_id}",
                      "timezone": "Local"
                    },
                    {
                      "file_path": "/var/log/cfn-*.log",
                      "log_group_name": "/var/log/userdata",
                      "log_stream_name": "/var/log/amazon/cfn/cfn-init.log-{instance_id}",
                      "timezone": "Local"
                    },
                    {
                      "file_path": "/var/log/cloud-init.log",
                      "log_group_name": "/var/log/cloud-init",
                      "log_stream_name": "/var/log/amazon/cloud-init/cloud-init.log-{instance_id}",
                      "timezone": "Local"
                    },
                    {
                      "file_path": "/var/log/cloud-init-output.log",
                      "log_group_name": "/var/log/cloud-init",
                      "log_stream_name": "/var/log/amazon/cloud-init/cloud-init-output.log-{instance_id}",
                      "timezone": "Local"
                    }
                  ]
                }
              }
            }
          }

  CloudWatchConfig:
    Type: AWS::SSM::Association
    DependsOn: PrasLearningFleet
    Properties:
      AssociationName: Configure-CloudWatch
      Name: AWS-RunShellScript
      Parameters:
        commands:
          - >
            sudo /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config
            -m ec2 -c ssm:/pras-cloudwatch-config
          - sudo /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -m ec2 -a start
      ScheduleExpression: rate(1 hour)
      Targets:
        - Key: tag:created_by
          Values:
            - pras

######################################################### END CLOUDWATCH ###################################################################

Outputs:
  PrasAsgSecurityGroupOutput:
    Description: Pras Asg Security Group Id
    Value: !Ref PrasAsgSecurityGroup

